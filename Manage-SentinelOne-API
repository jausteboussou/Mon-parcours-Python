import requests
import json
import sys
from util import Utilities  # Import d'une classe utilitaire pour l'affichage des logs et des erreurs
import getpass
import pandas as pd
from datetime import date  # Import pour la gestion des dates

# Classe représentant une application pour récupérer des informations via SentinelOne
class Application:
    def __init__(self, baseurl, machine_name, session, response, application_name, application_vendor, application_version):
        self.baseurl = baseurl  # URL de base de l'API SentinelOne
        self.machine_name = machine_name  # Nom de la machine
        self.session = session  # Session HTTP pour la communication avec l'API
        self.response = response  # Stocke la réponse de l'API
        # Demande à l'utilisateur de fournir les détails de l'application à rechercher
        self.application_name = input("Entrer le nom de l'application, exemple (FortiClient) : ")
        self.application_vendor = input("Entrer le nom de l'application Vendor, exemple (Fortinet Technologies Inc) : ")
        self.application_version = input("Entrer la version de l'application, exemple (6.0.5.8) : ")

    # Fonction pour récupérer la version de l'application avec le nom d'ordinateur
    def GetApplication_Version_With_ComputerName(self):
        print("[LOG] Checking SentinelOne connection...")
        try:
            # Effectuer une requête GET pour récupérer les informations sur les applications installées
            self.response = self.session.get(
                f"{self.baseurl}/web/api/v2.1/application-management/risks/endpoints?applicationName={self.application_name}&applicationVendor={self.application_vendor}&applicationVersions={self.application_version}&limit=1000"
            )
            
            if self.response.status_code == 200:
                export_data = []
                print(f"[OK] Les données ont été récupérées.")
                data_list = self.response.json()["data"]  # Extraire les données JSON de la réponse

                for data_dict in data_list:
                    self.machine_name = data_dict["endpointName"]
                    print("Nom de la machine : " + str(data_dict["endpointName"]))
                    print("Version : " + str(data_dict["applicationVersion"]))
                    print("osVersion : " + str(data_dict["osVersion"]))
                    
                    # Récupérer le dernier utilisateur connecté sur la machine
                    data_GetUsername = self.GetUsername()[0]
                    print("LastUserLogged : " + str(data_GetUsername['lastLoggedInUserName']))
                    print()
                    
                    # Stocker les informations pour l'exportation
                    export_data.append({
                        "Nom de la machine": data_dict["endpointName"],
                        "Version": data_dict["applicationVersion"],
                        "OS Version": data_dict["osVersion"],
                        "Last User Logged": data_GetUsername["lastLoggedInUserName"]
                    })
                       
                today = date.today()
                
                # Création d'un DataFrame pandas pour stocker les données sous forme de tableau
                df = pd.DataFrame(data=export_data)

                # Exporter les données dans un fichier Excel
                df.to_excel(f"output_{today.isoformat()}.xlsx", index=False)
                print("Données exportées")
                return True
            else:
                print(f"[ERROR] Échec lors de la récupération des données : {self.response.status_code}")
                return False
        except Exception as e:
            print(f"[EXCEPTION] Requête obtenue : {str(e)}")
            return False

    # Fonction pour récupérer le dernier utilisateur connecté sur la machine
    def GetUsername(self):
        self.response = session.get(
            f"{self.baseurl}/web/api/v2.1/agents?computerName={self.machine_name}"
        )
        data_list = self.response.json()["data"]
        return data_list


# Fonctions utilitaires pour afficher des messages avec des codes de couleur
def printSuccess(msg):
    print(Utilities.OKGREEN + "[OK] " + msg + Utilities.ENDC)

def printError(msg):
    print(Utilities.FAIL + "[ERROR] " + msg + Utilities.ENDC)

def printException(msg):
    print(Utilities.FAIL + "[EXCEPTION] " + msg + Utilities.ENDC + str(sys.exc_info()[0]))

def printLog(msg):
    print(Utilities.OKGREEN + "[LOG] " + msg + Utilities.ENDC)

# Fonction pour s'authentifier auprès de l'API SentinelOne avec un token API
def login(session, APIToken):
    printLog('Logging in...')
    session.headers.update({'Authorization': 'APIToken ' + APIToken})
    try:
        if test_connection(session):
            printSuccess("Successfully connected with API Token")
            return True
        else:
            printError("Connection failed: Check your API Token")
            return False
    except Exception as e:
        printException(f"Login error: {str(e)}")
        return False

# Fonction pour tester la connexion avec l'API SentinelOne
def test_connection(session):
    try:
        response = session.get(f"{baseurl}/web/api/v2.1/users")
        return response.status_code == 200
    except Exception as e:
        printException(f"Connection test failed: {str(e)}")
        return False

# Point d'entrée principal du script
if __name__ == "__main__":
    baseurl = 'https://***.sentinelone.net'  # URL de l'API SentinelOne (remplacée par des étoiles pour la confidentialité)
    
    try:
        session = requests.Session()  # Création d'une session HTTP persistante
        APIToken = input("APIToken: ")  # Demande du token API pour l'authentification
        
        if login(session, APIToken):  # Vérification de la connexion
            # Création d'une instance de la classe Application
            forticlient = Application(baseurl, None, session, None, None, None, None)
            forticlient.GetApplication_Version_With_ComputerName()  # Lancement de la récupération des versions des applications
        else:
            printError("Failed to initialize connection")
            
    except Exception as e:
        printException(f"Script execution failed: {str(e)}")
